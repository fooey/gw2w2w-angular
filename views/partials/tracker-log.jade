#trackerLog
	ul.nav.nav-tabs
		li(ng-class="{active: logFilters.map === 'all'}")
			a(ng-click="logFilters.map='all'") All
		li(ng-class="{active: logFilters.map === 'Center'}")
			a(ng-click="logFilters.map='Center'") {{mapNamesByType.Center}}
		li.red.team(ng-class="{active: logFilters.map === 'RedHome'}")
			a(ng-click="logFilters.map='RedHome'") {{mapNamesByType.RedHome}}
		li.blue.team(ng-class="{active: logFilters.map === 'BlueHome'}")
			a(ng-click="logFilters.map='BlueHome'") {{mapNamesByType.BlueHome}}
		li.green.team(ng-class="{active: logFilters.map === 'GreenHome'}")
			a(ng-click="logFilters.map='GreenHome'") {{mapNamesByType.GreenHome}}
	.panel.panel-default
		.panel-body
			ul.list-unstyled
				li.logHeader.slide-right
					span.when When
					span.where Map
					span.icon
					span.direction
					span.name Objective
					//- span.world Who
					span.description Description
					span.filterButtons
						.btn-group.btn-group-xs
							button.btn(ng-click="logFilters.captures = true; logFilters.claims = true;", ng-class="{'btn-primary': logFilters.captures && logFilters.claims}") All Events
							button.btn(ng-click="logFilters.captures = true; logFilters.claims = false;", ng-class="{'btn-primary': logFilters.captures && !logFilters.claims}") Captures
							button.btn(ng-click="logFilters.captures = false; logFilters.claims = true;", ng-class="{'btn-primary': logFilters.claims && !logFilters.captures}") Claims
						.btn-group.btn-group-xs
							button.btn.btn-danger(ng-click="timeline = []") Clear

			ul#trackerLogEvents.list-unstyled
				li.team.teamBgHover.event.slide-top.objective(
					ng-repeat="(key, event) in filteredEvents = (timeline | logFilter:logFilters) | orderBy:'timestamp':true | limitTo:100"
				)
					gw2-objective(
						is-static = "true",
						columns = "['moment', 'timestamp', 'mapName', 'icon', 'direction', 'name', 'descriptionType', 'timer', 'guildName']",
						timestamp = "event.timestamp",
						lang-key = "active.lang.slug",
						map-name = "gw2.wvw.mapObjectives[event.objective.id].mapName.replace('Home', '')",
						description-type = "event.type",

						objective = "objectives[event.objective.id]",
						state = "state[event.objective.id]",
						guild = "guilds[state[event.objective.id].owner_guild]",
					)